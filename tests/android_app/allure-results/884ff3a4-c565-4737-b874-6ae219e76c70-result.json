{"name": "test_open_article", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Authorization required", "trace": "fn = <selene.core.wait.Command object at 0x000001D9AEC07B30>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:61: in __call__\n    return self._fn(entity)\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\entity.py:525: in raw_click\n    element.locate().click()\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\entity.py:185: in locate\n    return self._locator()\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\locator.py:34: in __call__\n    return self._locate()\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\_browser.py:71: in <lambda>\n    Locator(f'{self}.element({by})', lambda: self.driver.find_element(*by)),\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\_browser.py:34: in driver\n    return self.config.driver\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py:305: in __get__\n    driver = config.build_driver_strategy(config)\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py:129: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py:120: in build_appium_driver\n    return webdriver.Remote(\n..\\..\\.venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:229: in __init__\n    super().__init__(\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\n..\\..\\.venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:320: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D9AEBC22A0>\nresponse = {'status': 401, 'value': 'Authorization required'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n>           raise exception_class(value)\nE           selenium.common.exceptions.WebDriverException: Message: Authorization required\n\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:193: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_open_article():\n        with step('Search article'):\n>           browser.element((AppiumBy.ACCESSIBILITY_ID, \"Search Wikipedia\")).click()\n\ntest_wikipedia_article_search.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\entity.py:540: in click\n    self.wait.for_(\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:148: in logic\n    raise self._hook_failure(failure)\n..\\..\\.venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py:1411: in save_and_log_screenshot\n    path = self._save_screenshot_strategy(self)  # type: ignore\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py:1238: in <lambda>\n    lambda config, path=None: fp.thread(  # type: ignore\n..\\..\\.venv\\Lib\\site-packages\\selene\\common\\fp.py:83: in thread\n    return pipe(*functions)(arg)\n..\\..\\.venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n..\\..\\.venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n..\\..\\.venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n..\\..\\.venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n..\\..\\.venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py:1269: in <lambda>\n    lambda path: (path if config.driver.get_screenshot_as_file(path) else None),\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py:305: in __get__\n    driver = config.build_driver_strategy(config)\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py:129: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py:120: in build_appium_driver\n    return webdriver.Remote(\n..\\..\\.venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:229: in __init__\n    super().__init__(\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\n..\\..\\.venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:320: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D9AEC86420>\nresponse = {'status': 401, 'value': 'Authorization required'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n>           raise exception_class(value)\nE           selenium.common.exceptions.WebDriverException: Message: Authorization required\n\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:193: WebDriverException"}, "steps": [{"name": "Search article", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Authorization required\n\n", "trace": "  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\tests\\android_app\\test_wikipedia_article_search.py\", line 8, in test_open_article\n    browser.element((AppiumBy.ACCESSIBILITY_ID, \"Search Wikipedia\")).click()\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\core\\entity.py\", line 540, in click\n    self.wait.for_(\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 150, in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 148, in logic\n    raise self._hook_failure(failure)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\common\\fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                             ^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 1411, in save_and_log_screenshot\n    path = self._save_screenshot_strategy(self)  # type: ignore\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 1238, in <lambda>\n    lambda config, path=None: fp.thread(  # type: ignore\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\common\\fp.py\", line 83, in thread\n    return pipe(*functions)(arg)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\common\\fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                           ^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\common\\fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                           ^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\common\\fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                           ^^^^^^^\n  [Previous line repeated 2 more times]\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 1269, in <lambda>\n    lambda path: (path if config.driver.get_screenshot_as_file(path) else None),\n                          ^^^^^^^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 305, in __get__\n    driver = config.build_driver_strategy(config)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 129, in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n           ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\core\\configuration.py\", line 120, in build_appium_driver\n    return webdriver.Remote(\n           ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 229, in __init__\n    super().__init__(\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 208, in __init__\n    self.start_session(capabilities)\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\appium\\webdriver\\webdriver.py\", line 320, in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 193, in check_response\n    raise exception_class(value)\n"}, "start": 1714469321638, "stop": 1714469332558}], "start": 1714469321638, "stop": 1714469332577, "uuid": "ab335dda-0407-4176-8f5a-a187e65e3a93", "historyId": "552741f0419b85a51e783bdaeb05828a", "testCaseId": "552741f0419b85a51e783bdaeb05828a", "fullName": "tests.android_app.test_wikipedia_article_search#test_open_article", "labels": [{"name": "parentSuite", "value": "tests.android_app"}, {"name": "suite", "value": "test_wikipedia_article_search"}, {"name": "host", "value": "WIN-3GP2HCV5B3R"}, {"name": "thread", "value": "1468-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.android_app.test_wikipedia_article_search"}]}