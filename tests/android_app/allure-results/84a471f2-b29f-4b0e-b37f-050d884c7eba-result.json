{"name": "test_search", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 10.0s, while waiting for:\nbrowser.all(('id', 'org.wikipedia.alpha:id/page_list_item_title')).has size greater than 0\n\nReason: AssertionError: actual size: 0\nScreenshot: file://C:\\Users\\abdrakhmanovea\\.selene\\screenshots\\1714470098139\\1714470098139.png\nPageSource: file://C:\\Users\\abdrakhmanovea\\.selene\\screenshots\\1714470098139\\1714470098139.html", "trace": "fn = <selene.core.conditions.CollectionCondition object at 0x000001C5C5586750>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\condition.py:174: in __call__\n    return self._fn(entity)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nentity = <selene.core.entity.Collection object at 0x000001C5C26CC7A0>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__ if query_to_str.startswith('<function') else query_to_str\n        )\n        actual = query(entity)\n        if not predicate(actual):\n>           raise AssertionError(f'actual {result}: {actual}')\nE           AssertionError: actual size: 0\n\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\condition.py:146: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_search():\n        with step('Type search'):\n            browser.element((AppiumBy.ACCESSIBILITY_ID, \"Search Wikipedia\")).click()\n            browser.element((AppiumBy.ID, \"org.wikipedia.alpha:id/search_src_text\")).type('Appium')\n            browser.element((AppiumBy.ACCESSIBILITY_ID, \"Search Wikipedia\")).click()\n    \n        with step('Verify content found'):\n            results = browser.all((AppiumBy.ID, 'org.wikipedia.alpha:id/page_list_item_title'))\n>           results.should(have.size_greater_than(0))\n\ntest_wikipedia.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\entity.py:132: in should\n    self.wait.for_(condition)\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.conditions.CollectionCondition object at 0x000001C5C5586750>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 10.0s, while waiting for:\nE                   browser.all(('id', 'org.wikipedia.alpha:id/page_list_item_title')).has size greater than 0\nE                   \nE                   Reason: AssertionError: actual size: 0\nE                   Screenshot: file://C:\\Users\\abdrakhmanovea\\.selene\\screenshots\\1714470098139\\1714470098139.png\nE                   PageSource: file://C:\\Users\\abdrakhmanovea\\.selene\\screenshots\\1714470098139\\1714470098139.html\n\n..\\..\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:148: TimeoutException"}, "steps": [{"name": "Type search", "status": "passed", "start": 1714470098285, "stop": 1714470135457}, {"name": "Verify content found", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 10.0s, while waiting for:\nbrowser.all(('id', 'org.wikipedia.alpha:id/page_list_item_title')).has size greater than 0\n\nReason: AssertionError: actual size: 0\nScreenshot: file://C:\\Users\\abdrakhmanovea\\.selene\\screenshots\\1714470098139\\1714470098139.png\nPageSource: file://C:\\Users\\abdrakhmanovea\\.selene\\screenshots\\1714470098139\\1714470098139.html\n\n", "trace": "  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\tests\\android_app\\test_wikipedia.py\", line 14, in test_search\n    results.should(have.size_greater_than(0))\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\core\\entity.py\", line 132, in should\n    self.wait.for_(condition)\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 150, in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\abdrakhmanovea\\PycharmProjects\\app_wikipedia_browserstack\\.venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 148, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1714470135458, "stop": 1714470146569}], "start": 1714470098285, "stop": 1714470146578, "uuid": "2bc05eca-5af9-4527-9dd8-b9aca7a1f554", "historyId": "a41b8730c36cd71229ae59575c14d43d", "testCaseId": "a41b8730c36cd71229ae59575c14d43d", "fullName": "tests.android_app.test_wikipedia#test_search", "labels": [{"name": "parentSuite", "value": "tests.android_app"}, {"name": "suite", "value": "test_wikipedia"}, {"name": "host", "value": "WIN-3GP2HCV5B3R"}, {"name": "thread", "value": "14632-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.android_app.test_wikipedia"}]}